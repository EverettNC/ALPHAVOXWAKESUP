packages:
  yum:
    jq: []
    python3-pip: []

commands:
  01_install_aws_cli:
    command: |
      if ! command -v aws &> /dev/null; then
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        rm -rf aws awscliv2.zip
      fi
    ignoreErrors: true

  02_install_ssm_plugin:
    command: |
      pip3 install -U boto3
    ignoreErrors: true

container_commands:
  01_fetch_secrets:
    command: |
      #!/bin/bash
      
      # Get environment name
      EB_ENV=$(/opt/elasticbeanstalk/bin/get-config container -k environment_name)
      echo "Running in environment: $EB_ENV"
      
      # Determine secret path prefix based on environment
      if [[ "$EB_ENV" == *"prod"* ]] || [[ "$EB_ENV" == *"production"* ]]; then
        PREFIX="/alphavox/production"
      else
        PREFIX="/alphavox/staging"
      fi
      
      echo "Using secret prefix: $PREFIX"
      
      # Create secrets script
      mkdir -p /opt/elasticbeanstalk/hooks/appdeploy/pre/
      cat > /opt/elasticbeanstalk/hooks/appdeploy/pre/00_get_secrets.sh << 'EOF'
      #!/bin/bash
      
      # Load environment variables
      EB_ENV=$(/opt/elasticbeanstalk/bin/get-config container -k environment_name)
      
      # Determine secret path prefix based on environment
      if [[ "$EB_ENV" == *"prod"* ]] || [[ "$EB_ENV" == *"production"* ]]; then
        PREFIX="/alphavox/production"
      else
        PREFIX="/alphavox/staging"
      fi
      
      # Get AWS region
      REGION=$(/opt/elasticbeanstalk/bin/get-config environment -k AWS_REGION)
      if [ -z "$REGION" ]; then
        REGION=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq -r .region)
      fi
      
      # Function to get secret and add to environment
      get_secret() {
        local SECRET_NAME="$1"
        local ENV_NAME="$2"
        local DEFAULT="$3"
        
        # Try to get from SSM Parameter Store
        SECRET_VALUE=$(aws ssm get-parameter --name "${PREFIX}/${SECRET_NAME}" --with-decryption --region $REGION --query "Parameter.Value" --output text 2>/dev/null)
        
        # If not found and default is provided, use default
        if [ $? -ne 0 ] && [ -n "$DEFAULT" ]; then
          SECRET_VALUE="$DEFAULT"
          echo "Warning: Using default value for $ENV_NAME"
        fi
        
        # If we have a value, add it to environment
        if [ -n "$SECRET_VALUE" ]; then
          echo "Adding $ENV_NAME to environment"
          echo "$ENV_NAME=$SECRET_VALUE" >> /opt/elasticbeanstalk/deployment/env
        else
          echo "Warning: No value found for $ENV_NAME"
        fi
      }
      
      # Get secrets
      get_secret "DATABASE_URL" "DATABASE_URL"
      get_secret "OPENAI_API_KEY" "OPENAI_API_KEY"
      get_secret "ANTHROPIC_API_KEY" "ANTHROPIC_API_KEY"
      get_secret "SESSION_SECRET" "SESSION_SECRET" "default-session-secret-change-in-production"
      
      # For backward compatibility
      if grep -q "DATABASE_URL" /opt/elasticbeanstalk/deployment/env; then
        # Parse DATABASE_URL to get components for applications that use individual vars
        DB_URL=$(grep "DATABASE_URL" /opt/elasticbeanstalk/deployment/env | cut -d= -f2-)
        
        # Extract components using python (more reliable than bash parsing)
        python3 - << PYEOF
      import os
      from urllib.parse import urlparse
      
      try:
          url = "$DB_URL"
          if url:
              result = urlparse(url)
              userpass, hostport = result.netloc.split('@', 1)
              username, password = userpass.split(':', 1)
              
              if ':' in hostport:
                  host, port = hostport.split(':', 1)
              else:
                  host, port = hostport, '5432'
              
              database = result.path.lstrip('/')
              
              with open('/opt/elasticbeanstalk/deployment/env', 'a') as f:
                  f.write(f"POSTGRES_USER={username}\n")
                  f.write(f"POSTGRES_PASSWORD={password}\n")
                  f.write(f"POSTGRES_HOST={host}\n")
                  f.write(f"POSTGRES_PORT={port}\n")
                  f.write(f"POSTGRES_DB={database}\n")
              
              print("Added individual database components to environment")
          else:
              print("No DATABASE_URL found, skipping component extraction")
      except Exception as e:
          print(f"Error parsing DATABASE_URL: {e}")
      PYEOF
      fi
      EOF
      
      # Make executable
      chmod +x /opt/elasticbeanstalk/hooks/appdeploy/pre/00_get_secrets.sh
      
      echo "Secrets management script installed"
    leader_only: true