files:
  "/etc/nginx/conf.d/healthcheck.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      # Health check endpoint for AWS ELB/ALB
      location /health {
        access_log off;
        return 200 'OK';
        add_header Content-Type text/plain;
      }

  "/var/app/current/healthcheck.py":
    mode: "000755"
    owner: webapp
    group: webapp
    content: |
      #!/usr/bin/env python3
      import os
      import sys
      import requests
      import psycopg2

      def check_database():
          """Check database connection"""
          try:
              db_url = os.environ.get('DATABASE_URL')
              if not db_url:
                  print('DATABASE_URL environment variable not set')
                  return False

              conn = psycopg2.connect(db_url)
              cur = conn.cursor()
              cur.execute('SELECT 1')
              cur.close()
              conn.close()
              return True
          except Exception as e:
              print(f'Database check failed: {str(e)}')
              return False

      def check_web_server():
          """Check if web server is responding locally"""
          try:
              response = requests.get('http://localhost:5000/health')
              return response.status_code == 200
          except Exception as e:
              print(f'Web server check failed: {str(e)}')
              return False

      if __name__ == '__main__':
          db_ok = check_database()
          web_ok = check_web_server()

          if db_ok and web_ok:
              print('Health check passed')
              sys.exit(0)
          else:
              print('Health check failed')
              sys.exit(1)

container_commands:
  01_create_health_endpoint:
    command: "mkdir -p /var/app/current/routes && cat > /var/app/current/routes/health_routes.py << 'EOF'
from flask import Blueprint, jsonify

health_bp = Blueprint('health', __name__)

@health_bp.route('/health')
def health_check():
    return jsonify({
        'status': 'ok',
        'version': '1.0.0'
    })

def register_health_routes(app):
    app.register_blueprint(health_bp)
EOF"

  02_update_app_routes:
    command: "if ! grep -q 'from routes.health_routes import register_health_routes' /var/app/current/app_routes.py; then sed -i '/from routes.learning_routes import register_learning_routes/a from routes.health_routes import register_health_routes' /var/app/current/app_routes.py; fi"

  03_register_health_routes:
    command: "if ! grep -q 'register_health_routes(app)' /var/app/current/app_routes.py; then sed -i '/register_learning_routes(app)/a \    register_health_routes(app)' /var/app/current/app_routes.py; fi"
