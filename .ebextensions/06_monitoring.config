files:
  "/etc/cloudwatch/conf.d/flask-application.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      [/var/log/eb-flask.log]
      datetime_format = %Y-%m-%d %H:%M:%S
      file = /var/log/eb-flask.log
      buffer_duration = 5000
      log_stream_name = {instance_id}/var/log/eb-flask.log
      initial_position = start_of_file
      log_group_name = /aws/elasticbeanstalk/#{AWS::StackName}/var/log/eb-flask.log

  "/opt/elasticbeanstalk/tasks/bundlelogs.d/flask.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      /var/log/eb-flask.log

  "/opt/elasticbeanstalk/tasks/taillogs.d/flask.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
      /var/log/eb-flask.log

  "/opt/elasticbeanstalk/hooks/appdeploy/post/02_configure_application_logging.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash

      # Set up proper logging
      LOG_DIR="/var/log"
      FLASK_LOG_FILE="$LOG_DIR/eb-flask.log"

      # Create the log file if it doesn't exist
      touch $FLASK_LOG_FILE

      # Set permissions
      chown webapp:webapp $FLASK_LOG_FILE
      chmod 664 $FLASK_LOG_FILE

      # Configure app to log to this file
      cat > /opt/elasticbeanstalk/deployment/env/LOGGING_CONFIG << 'EOF'
      {
        "version": 1,
        "formatters": {
          "default": {
            "format": "[%(asctime)s] [%(levelname)s] [%(name)s] - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S"
          }
        },
        "handlers": {
          "console": {
            "class": "logging.StreamHandler",
            "level": "INFO",
            "formatter": "default",
            "stream": "ext://sys.stdout"
          },
          "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "level": "INFO",
            "formatter": "default",
            "filename": "/var/log/eb-flask.log",
            "maxBytes": 10485760,
            "backupCount": 5
          }
        },
        "root": {
          "level": "INFO",
          "handlers": ["console", "file"]
        }
      }
      EOF

      # Set environment variable to point to this config
      echo 'LOGGING_CONFIG_FILE=/opt/elasticbeanstalk/deployment/env/LOGGING_CONFIG' >> /opt/elasticbeanstalk/deployment/env/aws_env

      # Update the application code to use this configuration
      WSGI_PATH=$(find /var/app/current -name 'main.py' | head -1)
      APP_DIR=$(dirname $WSGI_PATH)

      if [ -f "$APP_DIR/app.py" ]; then
        # Add logging configuration if not already present
        if ! grep -q "configure_logging()" "$APP_DIR/app.py"; then
          cat > "$APP_DIR/logging_config.py" << 'EOF'
import os
import json
import logging.config

def configure_logging():
    """Configure application logging using environment variable."""
    config_file = os.environ.get('LOGGING_CONFIG_FILE')

    if config_file and os.path.exists(config_file):
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
                logging.config.dictConfig(config)
                logging.info("Logging configured from file")
        except Exception as e:
            logging.error(f"Error configuring logging: {e}")
    else:
        # Fallback to basic configuration
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] [%(levelname)s] [%(name)s] - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        logging.info("Fallback logging configuration applied")
EOF

          # Add import to app.py if not present
          if ! grep -q "from logging_config import configure_logging" "$APP_DIR/app.py"; then
            sed -i '1s/^/from logging_config import configure_logging\n/' "$APP_DIR/app.py"
          fi

          # Call the configure_logging function at the appropriate place
          if grep -q "if __name__ == '__main__':" "$APP_DIR/app.py"; then
            # Add before main block
            sed -i '/if __name__ == .__main__.:/ i\
# Configure logging\
configure_logging()\
' "$APP_DIR/app.py"
          else
            # Add after imports
            sed -i '/^import/!{/^from/!{/^#/!{/^$/!{1,20{/./i\
# Configure logging\
configure_logging()\
}}}}};' "$APP_DIR/app.py"
          fi
        fi
      fi

option_settings:
  # CloudWatch Logs integration
  aws:elasticbeanstalk:cloudwatch:logs:
    StreamLogs: true
    DeleteOnTerminate: false
    RetentionInDays: 7

  # Enhanced health metrics
  aws:elasticbeanstalk:healthreporting:system:
    SystemType: enhanced

  # X-Ray integration (optional)
  # aws:elasticbeanstalk:xray:
  #   XRayEnabled: true
